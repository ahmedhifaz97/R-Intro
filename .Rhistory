install.packages(c("pagedown", "xaringan"))
pagedown::chrome_print("/home/sthu/Dropbox/hsf/courses_202/R/github/R-Intro/lessons/SH-01.Rmd")
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
# remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
library(pagedown)
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
library(remotes)
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
install.packages(remotes)
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
install.packages("remotes")
install.packages("pagedown")
install.packages("xaringan")
library(pagedown)
library(remotes)
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
library(pagedown)
pagedown::chrome_print("/home/sthu/Dropbox/hsf/courses_202/R/github/R-Intro/lessons/SH-01.Rmd")
?pagedown
??pagedown
install.packages("webshot")
library(webshot)
install_phantomjs()
setwd("~/Dropbox/hsf/courses_202/R/github/R-Intro")
file_name <- paste0("file://", normalizePath("lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
file_name <- paste0("file://", normalizePath("/lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
file_name <- paste0("file://", normalizePath("lessons/SH-02.html"))
file_name <- paste0("file:/", normalizePath("lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
file_name <- paste0("file:", normalizePath("lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
library(httpuv)
library(remotes)
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
install.packages("websocket")
library(httpuv)
library(remotes)
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
library(websocket)
# with "Ctrl+Enter" you can execute a line of command, try it out:
print("Hello, world!")
# we use the book: "R for Dummies" in the course
# when reading the book, always try to execute the code snippets by your own
# For example, p. 3:
# Simulate 1 million throws of two six‐sided dices:
set.seed(42)
throws <- 1e6
dice <- replicate(2,
sample(1:6, throws, replace = TRUE)
)
source('~/Dropbox/hsf/courses_202/R/github/R-Intro/scripts/SH-R-01.R')
pagebreak
```r
sqrt(81)
```
```r
sqrt(glengths)
```
sqrt(b)
?round
round(3.12342)
round(3.12342, digits)
round(3.12342, digits = 2)
```r
args(round)
```
args(round)
```r
example("round")
```
mean(b)
?mean
x -> c(x, 10)
x -> c(x 10)
x <- c(x, 10)
mean(x)
mean(x, trim=1)
mean(x, trim=.5)
mean(x, trim=2)
example(mean)
```r
sessionInfo() #Print version information about R, the OS and attached or loaded packages
search() #Gives a list of attached packages
```
search()
R packages are collections of functions and data sets developed by the community. They increase the power of R by improving existing base R functionalities, or by adding new ones. For example, if you are usually working with data frames, probably you will have heard about dplyr or data.table, two of the most popular R packages. The official repository (CRAN) contains more than 10,000 packages, and many more are publicly available through the internet.
There are 10,000+ user contributed packages and the number is growing.
```r
sessionInfo() #Print version information about R, the OS and attached or loaded packages
```
install.packages("devtools")
devtools::install_github("hadley/babynames")
library(devtools)
install.packages("r-base-dev")
install.packages("r-base-dev")
install.packages("r-devel")
install.packages("devtools")
install.packages("xml2")
install.packages("devtools")
```r
library(ggplot2)
```
insertClassMethods()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
library(ggplot2)
install.packages("tidyverse")
?tidyverse
help(tidyverse)
help("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
economics
packageDescription("tidyverse")
knit_with_parameters('~/Dropbox/hsf/courses_202/R/github/R-Intro/lessons/SH-03.Rmd')
```r
square_it(5)
```
```r
square_it <- function(x) {
square <- x * x
return(square)
}
```
Now, we can use the function as we would any other function. We type out the name of the function, and inside the parentheses  we provide a numeric value `x`:
knitr::opts_chunk$set(echo = TRUE)
```{r echo=TRUE}
square_it(5)
knit_with_parameters('~/Dropbox/hsf/courses_202/R/github/R-Intro/lessons/SH-03.Rmd')
square_it(5)
